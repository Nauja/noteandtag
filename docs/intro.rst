
NoteAndTag
==========


.. image:: https://travis-ci.com/Nauja/noteandtag.png?branch=master
   :target: https://travis-ci.com/Nauja/noteandtag
   :alt: Build Status


.. image:: https://readthedocs.org/projects/noteandtag/badge/?version=latest
   :target: https://noteandtag.readthedocs.io/en/latest/?badge=latest
   :alt: Documentation Status


.. image:: https://codeclimate.com/github/Nauja/noteandtag/badges/coverage.svg
   :target: https://codeclimate.com/github/Nauja/noteandtag/coverage
   :alt: Test Coverage


.. image:: https://img.shields.io/badge/code%20style-black-000000.svg
   :target: https://github.com/psf/black
   :alt: Code style: black


.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat
   :target: https://github.com/Nauja/noteandtag/issues
   :alt: contributions welcome


Website and REST API for taking notes and organizing by tags

Online demo
-----------

You can test the website online at `noteandtag.jeremymorosi.com <http://noteandtag.jeremymorosi.com>`_\ :


.. image:: http://cdn.jeremymorosi.com/noteandtag/website_preview.png
   :target: http://cdn.jeremymorosi.com/noteandtag/website_preview.png
   :alt: alt text


You can test the REST API online at `noteandtag.jeremymorosi.com/api/v1/doc <http://noteandtag.jeremymorosi.com/api/v1/doc>`_\ :


.. image:: http://cdn.jeremymorosi.com/noteandtag/swagger_preview.png
   :target: http://cdn.jeremymorosi.com/noteandtag/swagger_preview.png
   :alt: alt text


The documentation is generated by ``aiohttp_swagger``.

Usage
-----

You can run the service as:

.. code-block:: bash

   python -m noteandtag {config_directory}

You can show help with ``noteandtag --help``\ :

.. code-block::

   usage: noteandtag [-h] [-v] directory

   Website and REST API for taking notes and organizing by tags

   positional arguments:
     directory      config directory

   optional arguments:
     -h, --help     show this help message and exit
     -v, --verbose  Verbosity level

To quick start using *NoteAndTag*\ , you can download this repository and run:

.. code-block:: bash

   python -m noteandtag etc

The default `\ ``etc/config.cnf`` <https://github.com/Nauja/noteandtag/blob/master/etc/config.cnf>`_ configuration file looks like this:

.. code-block::

   [service]
   port = 8080
   base-url = /
   api-base-url = /api/v1/
   cdn-url = /static
   static-dir = static
   jinja2-templates-dir = etc/templates
   default-theme = monokaiorange
   swagger-yml = etc/swagger.yml
   swagger-url = /api/v1/doc
   db = etc/db.yml

Where:


* **port**\ : is the public port to access the service.
* **base-url**\ : is the base URL to access the index page.
* **api-base-url**\ : is the base URL to access the REST API.
* **cdn-url**\ : is an optional URL to serve static JS and CSS files.
* **static-dir**\ : is the path to local static JS and CSS files.
* **default-theme**\ : is the default theme users will see.
* **jinja2-templates-dir**\ : is the path to local Jinja2 templates files.
* **swagger-yml**\ : is the path to local Swagger description file.
* **swagger-url**\ : is the base URL to access Swagger documentation.
* **db**\ : is the file where notes will be saved.

You should now see:

.. code-block:: bash

   ======== Running on http://0.0.0.0:8080 ========
   (Press CTRL+C to quit)

Meaning you can go to ``http://localhost:8080`` and start using *NoteAndTag*.

Running with Docker
-------------------

You can build a Docker image by downloading this repository and running:

.. code-block:: bash

   docker build -t noteandtag:latest .

Next, run the Docker image as:

.. code-block:: bash

   docker run \
    -v /path/to/etc:/etc/service \
    -v /path/to/log:/var/log/service \
    -p 8080:8080 \
    -it noteandtag:latest

Where:


* **/path/to/etc**\ : is the path to the directory containing **config.cnf**.
* **/path/to/log**\ : is the path to the directory where you wan't to store logs.
* **8080**\ : is the public port to access the service.

As the Docker image exposes ``/etc/service``\ , your typical ``config.cnf`` configuration file would be:

.. code-block::

   [service]
   port = 8080
   base-url = /
   api-base-url = /api/v1/
   cdn-url = /static
   static-dir = /etc/service/static
   jinja2-templates-dir = /etc/service/templates
   default-theme = monokaiorange
   swagger-yml = /etc/service/swagger.yml
   swagger-url = /api/v1/doc
   db = /etc/service/db.yml

You should now see:

.. code-block:: bash

   ======== Running on http://0.0.0.0:8080 ========
   (Press CTRL+C to quit)

Meaning the service is up and ready.

Testing
-------

The ``test`` directory contains many tests that you can run with:

.. code-block:: python

   python setup.py test

Or with coverage:

.. code-block:: python

   coverage run --source=noteandtag setup.py test
